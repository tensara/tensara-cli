name: Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: tensara
            asset_name: tensara-linux-amd64
          - os: windows-latest
            artifact_name: tensara.exe
            asset_name: tensara-windows-amd64.exe
          - os: macos-latest
            artifact_name: tensara
            asset_name: tensara-macos-amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
        env:
          # This is passed in at compile time from github secrets, NOT ENV
          CHECKER_ENDPOINT: ${{ secrets.CHECKER_ENDPOINT }}
          BENCHMARK_ENDPOINT: ${{ secrets.BENCHMARK_ENDPOINT }}
          SUBMIT_ENDPOINT: ${{ secrets.SUBMIT_ENDPOINT }}
          PROBLEM_ENDPOINT: ${{ secrets.PROBLEM_ENDPOINT }}

      - name: Rename binary for consistent naming
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp target/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          else
            cp target/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          fi
        shell: bash

      - name: Create Release with gh CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Strip the 'refs/tags/' prefix from github.ref
          TAG_NAME="${{ github.ref_name }}"
          
          # Check if release already exists - using bash explicitly
          bash -c 'if gh release view "${{ github.ref_name }}" &>/dev/null; then
            echo "Release for ${{ github.ref_name }} already exists, uploading assets only"
            gh release upload "${{ github.ref_name }}" "${{ matrix.asset_name }}" --clobber
          else
            echo "Creating new release for ${{ github.ref_name }}"
            gh release create "${{ github.ref_name }}" \
              --title "Release ${{ github.ref_name }}" \
              --notes "Release ${{ github.ref_name }}" \
              "${{ matrix.asset_name }}"
          fi'
        shell: bash
